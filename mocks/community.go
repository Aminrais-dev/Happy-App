// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	community "capstone/happyApp/features/community"

	mock "github.com/stretchr/testify/mock"
)

// CommunityData is an autogenerated mock type for the DataInterface type
type CommunityData struct {
	mock.Mock
}

// ChangeAdmin provides a mock function with given fields: communityid
func (_m *CommunityData) ChangeAdmin(communityid int) (string, string, error) {
	ret := _m.Called(communityid)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(communityid)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(int) string); ok {
		r1 = rf(communityid)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(communityid)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CheckJoin provides a mock function with given fields: userid, communityid
func (_m *CommunityData) CheckJoin(userid int, communityid int) (string, error) {
	ret := _m.Called(userid, communityid)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, int) string); ok {
		r0 = rf(userid, communityid)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userid, communityid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: userid, communityid
func (_m *CommunityData) Delete(userid int, communityid int) (int64, string, error) {
	ret := _m.Called(userid, communityid)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int, int) int64); ok {
		r0 = rf(userid, communityid)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(int, int) string); ok {
		r1 = rf(userid, communityid)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(userid, communityid)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteCommunity provides a mock function with given fields: communityid
func (_m *CommunityData) DeleteCommunity(communityid int) (string, error) {
	ret := _m.Called(communityid)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(communityid)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(communityid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRole provides a mock function with given fields: Userid, communityid
func (_m *CommunityData) GetUserRole(Userid int, communityid int) (string, error) {
	ret := _m.Called(Userid, communityid)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, int) string); ok {
		r0 = rf(Userid, communityid)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(Userid, communityid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: userid, core
func (_m *CommunityData) Insert(userid int, core community.CoreCommunity) (string, error) {
	ret := _m.Called(userid, core)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, community.CoreCommunity) string); ok {
		r0 = rf(userid, core)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, community.CoreCommunity) error); ok {
		r1 = rf(userid, core)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertComment provides a mock function with given fields: _a0
func (_m *CommunityData) InsertComment(_a0 community.CoreComment) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(community.CoreComment) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(community.CoreComment) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertFeed provides a mock function with given fields: _a0
func (_m *CommunityData) InsertFeed(_a0 community.CoreFeed) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(community.CoreFeed) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(community.CoreFeed) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertToJoin provides a mock function with given fields: userid, communityid
func (_m *CommunityData) InsertToJoin(userid int, communityid int) (string, error) {
	ret := _m.Called(userid, communityid)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, int) string); ok {
		r0 = rf(userid, communityid)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userid, communityid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectCommunity provides a mock function with given fields: userid, communityid
func (_m *CommunityData) SelectCommunity(userid int, communityid int) (community.CoreCommunity, string, error) {
	ret := _m.Called(userid, communityid)

	var r0 community.CoreCommunity
	if rf, ok := ret.Get(0).(func(int, int) community.CoreCommunity); ok {
		r0 = rf(userid, communityid)
	} else {
		r0 = ret.Get(0).(community.CoreCommunity)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(int, int) string); ok {
		r1 = rf(userid, communityid)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(userid, communityid)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SelectFeed provides a mock function with given fields: feedid
func (_m *CommunityData) SelectFeed(feedid int) (community.CoreFeed, string, error) {
	ret := _m.Called(feedid)

	var r0 community.CoreFeed
	if rf, ok := ret.Get(0).(func(int) community.CoreFeed); ok {
		r0 = rf(feedid)
	} else {
		r0 = ret.Get(0).(community.CoreFeed)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(int) string); ok {
		r1 = rf(feedid)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(feedid)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SelectList provides a mock function with given fields:
func (_m *CommunityData) SelectList() ([]community.CoreCommunity, string, error) {
	ret := _m.Called()

	var r0 []community.CoreCommunity
	if rf, ok := ret.Get(0).(func() []community.CoreCommunity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]community.CoreCommunity)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SelectListCommunityWithParam provides a mock function with given fields: param
func (_m *CommunityData) SelectListCommunityWithParam(param string) ([]community.CoreCommunity, string, error) {
	ret := _m.Called(param)

	var r0 []community.CoreCommunity
	if rf, ok := ret.Get(0).(func(string) []community.CoreCommunity); ok {
		r0 = rf(param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]community.CoreCommunity)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(param)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SelectMembers provides a mock function with given fields: communityid
func (_m *CommunityData) SelectMembers(communityid int) ([]string, string, error) {
	ret := _m.Called(communityid)

	var r0 []string
	if rf, ok := ret.Get(0).(func(int) []string); ok {
		r0 = rf(communityid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(int) string); ok {
		r1 = rf(communityid)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(communityid)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateCommunity provides a mock function with given fields: communityid, core
func (_m *CommunityData) UpdateCommunity(communityid int, core community.CoreCommunity) (string, error) {
	ret := _m.Called(communityid, core)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, community.CoreCommunity) string); ok {
		r0 = rf(communityid, core)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, community.CoreCommunity) error); ok {
		r1 = rf(communityid, core)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCommunityData interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommunityData creates a new instance of CommunityData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommunityData(t mockConstructorTestingTNewCommunityData) *CommunityData {
	mock := &CommunityData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
