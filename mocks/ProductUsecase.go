// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	product "capstone/happyApp/features/product"

	mock "github.com/stretchr/testify/mock"
)

// UsecaseProduct is an autogenerated mock type for the UsecaseInterface type
type UsecaseProduct struct {
	mock.Mock
}

// DeleteProduct provides a mock function with given fields: idProduct, userId
func (_m *UsecaseProduct) DeleteProduct(idProduct int, userId int) int {
	ret := _m.Called(idProduct, userId)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(idProduct, userId)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetProduct provides a mock function with given fields: idProduct, userId
func (_m *UsecaseProduct) GetProduct(idProduct int, userId int) (product.Comu, product.ProductCore, error) {
	ret := _m.Called(idProduct, userId)

	var r0 product.Comu
	if rf, ok := ret.Get(0).(func(int, int) product.Comu); ok {
		r0 = rf(idProduct, userId)
	} else {
		r0 = ret.Get(0).(product.Comu)
	}

	var r1 product.ProductCore
	if rf, ok := ret.Get(1).(func(int, int) product.ProductCore); ok {
		r1 = rf(idProduct, userId)
	} else {
		r1 = ret.Get(1).(product.ProductCore)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(idProduct, userId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetProductComu provides a mock function with given fields: idComu, userId
func (_m *UsecaseProduct) GetProductComu(idComu int, userId int) (product.Comu, []product.ProductCore, error) {
	ret := _m.Called(idComu, userId)

	var r0 product.Comu
	if rf, ok := ret.Get(0).(func(int, int) product.Comu); ok {
		r0 = rf(idComu, userId)
	} else {
		r0 = ret.Get(0).(product.Comu)
	}

	var r1 []product.ProductCore
	if rf, ok := ret.Get(1).(func(int, int) []product.ProductCore); ok {
		r1 = rf(idComu, userId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]product.ProductCore)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(idComu, userId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PostProduct provides a mock function with given fields: _a0, _a1
func (_m *UsecaseProduct) PostProduct(_a0 product.ProductCore, _a1 int) int {
	ret := _m.Called(_a0, _a1)

	var r0 int
	if rf, ok := ret.Get(0).(func(product.ProductCore, int) int); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// UpdateProduct provides a mock function with given fields: _a0, _a1
func (_m *UsecaseProduct) UpdateProduct(_a0 product.ProductCore, _a1 int) int {
	ret := _m.Called(_a0, _a1)

	var r0 int
	if rf, ok := ret.Get(0).(func(product.ProductCore, int) int); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

type mockConstructorTestingTNewUsecaseProduct interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsecaseProduct creates a new instance of UsecaseProduct. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsecaseProduct(t mockConstructorTestingTNewUsecaseProduct) *UsecaseProduct {
	mock := &UsecaseProduct{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
